# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import requests
from bs4 import BeautifulSoup
import telebot
from telebot import types
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
import time
import random
file = open('./mytoken.txt')
mytoken = file.read()
# –ü–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç FatherBot
bot = telebot.TeleBot(mytoken)

options = Options()
options.add_argument('--headless')  # Run in headless mode (without opening a browser window)
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()),options=options)
driver.get('https://www.google.com/')

data = []

# –ó–∞–¥–∞–µ–º URL —Å–∞–π—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
url = 'https://rozetka.com.ua/bicycles/c83884/page={page}/'
params = {"search_text": "–≤–µ–ª–æ—Å–∏–ø–µ–¥"}
for page in range(1, 11):
    try:
        # Load the page using Selenium WebDriver
        driver.get(url.format(page=page, **params))

        # Extract the page content after it has been rendered
        page_content = driver.page_source

        # Create BeautifulSoup object for parsing
        soup = BeautifulSoup(page_content, 'html.parser')

        # Scraping logic goes here...
        products = soup.find_all("div", class_="goods-tile__inner")
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö
        if products:
            for product in products:
                # –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞
                image = product.find("img", class_="lazy_img_hover").get("src")
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                title = product.find("span", class_="goods-tile__title").text
                # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
                price = product.find("span", class_="goods-tile__price-value").text
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–ø–∏—Å–æ–∫ data
                data.append({"image": image, "title": title, "price": price})
                time.sleep(random(1, 6))
        else:
            print('net')

    except Exception as e:
        print('Error occurred:', e)

# Clean up the WebDriver instance
driver.quit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–æ–≤–∞—Ä–∞–º
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º')
    markup.add(button1)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫–æ–π
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã —Å —Å–∞–π—Ç–∞ Rozetka.', reply_markup=markup)

@bot.message_handler(content_types='photo')
def get_photo(message):
    bot.send_message(message.chat.id, '–£ –º–µ–Ω—è –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ :(')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º "üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º"
@bot.message_handler(func=lambda message: message.text == 'üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º')
def goodsChapter(message):
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–∏–∫–ª for –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–∏–Ω–∞–º—ñ—á–Ω–æ
    for i in range(0, len(data)):
        button = types.KeyboardButton(f"üîπ –¢–æ–≤–∞—Ä #{i+1}: {data[i]['title']}")
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ —Ä–æ–∑–ºi—Ç–∫—É –∫–ª–∞–≤i–∞—Ç—É—Ä–∏
        markup.add(button)
    button5 = types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    markup.add(button5)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
    bot.send_message(message.chat.id, '–í–æ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∂–µ:', reply_markup=markup)
    for i in range(len(data)):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞ data –ø–æ –Ω–æ–º–µ—Ä—É
        item = data[i]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        bot.send_photo(message.chat.id, item["image"])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        bot.send_message(message.chat.id, f"üîπ –¢–æ–≤–∞—Ä #{i + 1}: {item['title']}\n–¶–µ–Ω–∞: {item['price']} –≥—Ä–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º "üîπ –¢–æ–≤–∞—Ä #" (–≥–¥–µ # - –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 4)
@bot.message_handler(func=lambda message: message.text.startswith('üîπ –¢–æ–≤–∞—Ä'))
def showProduct(message):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    number = int(message.text.split('#')[1].split(':')[0]) - 1
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    if 0 <= number < len(data):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞ data –ø–æ –Ω–æ–º–µ—Ä—É
        item = data[number]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        bot.send_photo(message.chat.id, item["image"])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        bot.send_message(message.chat.id, f"{item['title']}\n–¶–µ–Ω–∞: {item['price']} –≥—Ä–Ω.")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
def backToMenu(message):
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–æ–≤–∞—Ä–∞–º
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º')
    markup.add(button1)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫–æ–π
    bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=markup)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()
